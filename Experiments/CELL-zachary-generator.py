import numpy as np
import matplotlib.pyplot as plt
import time
import pickle

import networkx as nx
import igraph
import graphkernels as gk
import pandas as pd

from cell.utils import link_prediction_performance
from cell.cell import Cell, EdgeOverlapCriterion, LinkPredictionCriterion
from cell.graph_statistics import compute_graph_statistics

import torch
import scipy
import scipy.sparse as sp
from scipy.sparse import load_npz

import warnings
warnings.filterwarnings("ignore")

### load florentine marriage network - one node missing which is added manually
zach = nx.karate_club_graph()
X_zach = nx.to_numpy_matrix(zach, weight = None) 
train_graph = sp.csc_matrix(X_zach)

### create model
model_cell = Cell(A=train_graph,
             H = 10,
             callbacks=[EdgeOverlapCriterion(invoke_every=1, edge_overlap_limit=.5)])

### train model 
model_cell.train(steps=200,
            optimizer_fn=torch.optim.Adam,
            optimizer_args={'lr': 0.1,
                            'weight_decay': 1e-7}) #changed from 1e-7 before

### generate graphs
### return a CSV.file, where every row contains a flattened adjacency matrix generated by CELL
adjacency_overview = pd.DataFrame(index=range(10000),columns=range(34*34))

for i in range(10000):
    generated_graph = model_cell.sample_graph()
    adjacency_matrix = generated_graph.toarray()
    adjacency_vector = adjacency_matrix.flatten()
    #adjacency_vector = pd.DataFrame(adjacency_vector, dtype = "int")
    adjacency_overview.iloc[i,range(34*34)] = adjacency_vector
    if i%1000 == 0:
        print(i)

adjacency_overview.to_csv("CELL_graphs_from_zachary.csv", index = False, header = False)
